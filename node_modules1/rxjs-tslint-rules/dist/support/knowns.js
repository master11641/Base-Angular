"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var fs = require("fs");
var path = require("path");
var resolve = require("resolve");
var semver = require("semver");
var aliasOperators = { flatMap: "mergeMap" };
var dist = undefined;
var prototypeMethods = {};
try {
    var entry = resolve.sync("rxjs");
    dist = path.dirname(entry);
    var root = dist.replace(/node_modules[\/\\]rxjs[\/\\](.*)$/, function (match) { return match; });
    var version = require(path.join(root, "package.json")).version;
    prototypeMethods = semver.satisfies(version, "<5.5.0-beta.5") ? {} : { pipe: true, toPromise: true };
}
catch (error) {
    console.warn("Cannot find rxjs in node_modules; some rxjs-tslint-rules will be ineffectual.");
}
function read(dir) {
    if (!dist) {
        return {};
    }
    var names = fs.readdirSync(path.join(dist, dir));
    return names
        .filter(function (name) { return /^[a-z]\w+\.js$/.test(name); })
        .map(function (name) { return name.replace(/\.js/, ""); })
        .filter(function (name) { return !prototypeMethods[name]; })
        .reduce(function (acc, name) {
        return (tslib_1.__assign({}, acc, (_a = {}, _a[name] = name, _a)));
        var _a;
    }, {});
}
exports.knownObservables = read("add/observable");
exports.knownOperators = tslib_1.__assign({}, read("add/operator"), aliasOperators);
exports.knownPrototypeMethods = tslib_1.__assign({ forEach: true }, prototypeMethods);
exports.knownStaticMethods = { create: true };
